# -*- protobuffer -*- festus.AlignablesSpec
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016 Google, Inc.
# Author: mjansche@google.com (Martin Jansche)

# Alignment inventory that maps phonemic to surface phonetic forms in Burmese.

input_label_type: SYMBOL
output_label_type: SYMBOL

input_symbol { key: "k"    value: 1 }
input_symbol { key: "c"    value: 2 }
input_symbol { key: "g"    value: 3 }
input_symbol { key: "ng"   value: 4 }
input_symbol { key: "ng2"  value: 5 }
input_symbol { key: "k1"   value: 6 }
input_symbol { key: "c1"   value: 7 }
input_symbol { key: "g1"   value: 8 }
input_symbol { key: "s"    value: 9 }
input_symbol { key: "sh"   value: 10 }
input_symbol { key: "z"    value: 11 }
input_symbol { key: "ny"   value: 12 }
input_symbol { key: "ny2"  value: 13 }
input_symbol { key: "t"    value: 14 }
input_symbol { key: "th"   value: 15 }
input_symbol { key: "d"    value: 16 }
input_symbol { key: "n"    value: 17 }
input_symbol { key: "n2"   value: 18 }
input_symbol { key: "p"    value: 19 }
input_symbol { key: "ph"   value: 20 }
input_symbol { key: "b"    value: 21 }
input_symbol { key: "m"    value: 22 }
input_symbol { key: "m2"   value: 23 }
input_symbol { key: "j"    value: 24 }
input_symbol { key: "r"    value: 25 }
input_symbol { key: "s2"   value: 26 }
input_symbol { key: "l"    value: 27 }
input_symbol { key: "l2"   value: 28 }
input_symbol { key: "w"    value: 29 }
input_symbol { key: "w2"   value: 30 }
input_symbol { key: "ts"   value: 31 }
input_symbol { key: "ds"   value: 32 }
input_symbol { key: "h"    value: 33 }
input_symbol { key: "?"    value: 34 }
input_symbol { key: "a-"   value: 35 }
input_symbol { key: "i"    value: 36 }
input_symbol { key: "i;"   value: 37 }
input_symbol { key: "i,"   value: 38 }
input_symbol { key: "i'"   value: 39 }
input_symbol { key: "u"    value: 40 }
input_symbol { key: "u;"   value: 41 }
input_symbol { key: "u,"   value: 42 }
input_symbol { key: "u'"   value: 43 }
input_symbol { key: "e"    value: 44 }
input_symbol { key: "e;"   value: 45 }
input_symbol { key: "e,"   value: 46 }
input_symbol { key: "o"    value: 47 }
input_symbol { key: "o;"   value: 48 }
input_symbol { key: "o,"   value: 49 }
input_symbol { key: "eL"   value: 50 }
input_symbol { key: "eL;"  value: 51 }
input_symbol { key: "eL,"  value: 52 }
input_symbol { key: "au"   value: 53 }
input_symbol { key: "au;"  value: 54 }
input_symbol { key: "au,"  value: 55 }
input_symbol { key: "a"    value: 56 }
input_symbol { key: "a;"   value: 57 }
input_symbol { key: "a,"   value: 58 }
input_symbol { key: "a'"   value: 59 }
input_symbol { key: "iN"   value: 60 }
input_symbol { key: "iN;"  value: 61 }
input_symbol { key: "iN,"  value: 62 }
input_symbol { key: "uN"   value: 63 }
input_symbol { key: "uN;"  value: 64 }
input_symbol { key: "uN,"  value: 65 }
input_symbol { key: "eiN"  value: 66 }
input_symbol { key: "eiN;" value: 67 }
input_symbol { key: "eiN," value: 68 }
input_symbol { key: "oaN"  value: 69 }
input_symbol { key: "oaN;" value: 70 }
input_symbol { key: "oaN," value: 71 }
input_symbol { key: "aiN"  value: 72 }
input_symbol { key: "aiN;" value: 73 }
input_symbol { key: "aiN," value: 74 }
input_symbol { key: "auN"  value: 75 }
input_symbol { key: "auN;" value: 76 }
input_symbol { key: "auN," value: 77 }
input_symbol { key: "aN"   value: 78 }
input_symbol { key: "aN;"  value: 79 }
input_symbol { key: "aN,"  value: 80 }
input_symbol { key: "iT'"  value: 81 }
input_symbol { key: "uT'"  value: 82 }
input_symbol { key: "ei'"  value: 83 }
input_symbol { key: "oa'"  value: 84 }
input_symbol { key: "e'"   value: 85 }
input_symbol { key: "ai'"  value: 86 }
input_symbol { key: "au'"  value: 87 }
input_symbol { key: "aT'"  value: 88 }
input_symbol { key: "."    value: 89 }
input_symbol { key: "/"    value: 90 }

output_symbol { key: "k"    value: 1 }
output_symbol { key: "c"    value: 2 }
output_symbol { key: "g"    value: 3 }
output_symbol { key: "ng"   value: 4 }
output_symbol { key: "ng2"  value: 5 }
output_symbol { key: "k1"   value: 6 }
output_symbol { key: "c1"   value: 7 }
output_symbol { key: "g1"   value: 8 }
output_symbol { key: "s"    value: 9 }
output_symbol { key: "sh"   value: 10 }
output_symbol { key: "z"    value: 11 }
output_symbol { key: "ny"   value: 12 }
output_symbol { key: "ny2"  value: 13 }
output_symbol { key: "t"    value: 14 }
output_symbol { key: "th"   value: 15 }
output_symbol { key: "d"    value: 16 }
output_symbol { key: "n"    value: 17 }
output_symbol { key: "n2"   value: 18 }
output_symbol { key: "p"    value: 19 }
output_symbol { key: "ph"   value: 20 }
output_symbol { key: "b"    value: 21 }
output_symbol { key: "m"    value: 22 }
output_symbol { key: "m2"   value: 23 }
output_symbol { key: "j"    value: 24 }
output_symbol { key: "r"    value: 25 }
output_symbol { key: "s2"   value: 26 }
output_symbol { key: "l"    value: 27 }
output_symbol { key: "l2"   value: 28 }
output_symbol { key: "w"    value: 29 }
output_symbol { key: "w2"   value: 30 }
output_symbol { key: "ts"   value: 31 }
output_symbol { key: "ds"   value: 32 }
output_symbol { key: "h"    value: 33 }
output_symbol { key: "?"    value: 34 }
output_symbol { key: "a-"   value: 35 }
output_symbol { key: "i"    value: 36 }
output_symbol { key: "i;"   value: 37 }
output_symbol { key: "i,"   value: 38 }
output_symbol { key: "i'"   value: 39 }
output_symbol { key: "u"    value: 40 }
output_symbol { key: "u;"   value: 41 }
output_symbol { key: "u,"   value: 42 }
output_symbol { key: "u'"   value: 43 }
output_symbol { key: "e"    value: 44 }
output_symbol { key: "e;"   value: 45 }
output_symbol { key: "e,"   value: 46 }
output_symbol { key: "o"    value: 47 }
output_symbol { key: "o;"   value: 48 }
output_symbol { key: "o,"   value: 49 }
output_symbol { key: "eL"   value: 50 }
output_symbol { key: "eL;"  value: 51 }
output_symbol { key: "eL,"  value: 52 }
output_symbol { key: "au"   value: 53 }
output_symbol { key: "au;"  value: 54 }
output_symbol { key: "au,"  value: 55 }
output_symbol { key: "a"    value: 56 }
output_symbol { key: "a;"   value: 57 }
output_symbol { key: "a,"   value: 58 }
output_symbol { key: "a'"   value: 59 }
output_symbol { key: "iN"   value: 60 }
output_symbol { key: "iN;"  value: 61 }
output_symbol { key: "iN,"  value: 62 }
output_symbol { key: "uN"   value: 63 }
output_symbol { key: "uN;"  value: 64 }
output_symbol { key: "uN,"  value: 65 }
output_symbol { key: "eiN"  value: 66 }
output_symbol { key: "eiN;" value: 67 }
output_symbol { key: "eiN," value: 68 }
output_symbol { key: "oaN"  value: 69 }
output_symbol { key: "oaN;" value: 70 }
output_symbol { key: "oaN," value: 71 }
output_symbol { key: "aiN"  value: 72 }
output_symbol { key: "aiN;" value: 73 }
output_symbol { key: "aiN," value: 74 }
output_symbol { key: "auN"  value: 75 }
output_symbol { key: "auN;" value: 76 }
output_symbol { key: "auN," value: 77 }
output_symbol { key: "aN"   value: 78 }
output_symbol { key: "aN;"  value: 79 }
output_symbol { key: "aN,"  value: 80 }
output_symbol { key: "iT'"  value: 81 }
output_symbol { key: "uT'"  value: 82 }
output_symbol { key: "ei'"  value: 83 }
output_symbol { key: "oa'"  value: 84 }
output_symbol { key: "e'"   value: 85 }
output_symbol { key: "ai'"  value: 86 }
output_symbol { key: "au'"  value: 87 }
output_symbol { key: "aT'"  value: 88 }
output_symbol { key: "."    value: 89 }
output_symbol { key: "/"    value: 90 }


# Unwritten medial /j/ (after labials, in some words)

alignable { input: "p a-"  output: "p j iN" }
alignable { input: "p i'"  output: "p j i'" }
alignable { input: "p eL," output: "b j e," }
alignable { input: "m"     output: "m j" }


# Ambiguous medial /w/

alignable { input: "w aN"  output: "uN" }
alignable { input: "w aN;" output: "uN;" }
alignable { input: "w aN," output: "uN," }
alignable { input: "w a'"  output: "uT'" }  # written as <-w p asat>


# Unwritten geminate nasals

alignable { input: "u, . n"  output: "uN . n" }
alignable { input: "u, . n2" output: "uN . n2" }

alignable { input: "a . m" output: "aN . m" }


# Consonants

alignable { input: "k" output: "k" }
alignable { input: "k" output: "g" }
alignable { input: "k" output: "c" }

alignable { input: "c" output: "c" }
alignable { input: "c" output: "g" }

alignable { input: "g" output: "g" }

alignable { input: "ng" output: "ng" }

alignable { input: "ng2" output: "ng2" }

alignable { input: "k1" output: "k1" }
alignable { input: "k1" output: "g1" }

alignable { input: "c1" output: "c1" }
alignable { input: "c1" output: "g1" }

alignable { input: "g1" output: "g1" }

alignable { input: "s" output: "s" }
alignable { input: "s" output: "z" }

alignable { input: "sh" output: "sh" }
alignable { input: "sh" output: "z" }

alignable { input: "z" output: "z" }

alignable { input: "ny" output: "ny" }

alignable { input: "ny2" output: "ny2" }

alignable { input: "t" output: "t" }
alignable { input: "t" output: "d" }

alignable { input: "th" output: "th" }
alignable { input: "th" output: "d" }

alignable { input: "d" output: "d" }

alignable { input: "n" output: "n" }

alignable { input: "n2" output: "n2" }

alignable { input: "p" output: "p" }
alignable { input: "p" output: "b" }

alignable { input: "ph" output: "ph" }
alignable { input: "ph" output: "b" }

alignable { input: "b" output: "b" }
alignable { input: "b" output: "ph" }  # written with <bh>

alignable { input: "m" output: "m" }

alignable { input: "m2" output: "m2" }

alignable { input: "j" output: "j" }
alignable { input: "j" output: "r" }

alignable { input: "r" output: "r" }

alignable { input: "s2" output: "s2" }
alignable { input: "s2" output: "l2 j" }

alignable { input: "l" output: "l" }
alignable { input: "l" output: "" }  # coda /l/ dropped in native words

alignable { input: "l2" output: "l2" }

alignable { input: "w" output: "w" }

alignable { input: "w2" output: "w2" }

alignable { input: "ts" output: "ts" }
alignable { input: "ts" output: "ds" }

alignable { input: "ds" output: "ds" }

alignable { input: "h" output: "h" }

alignable { input: "?" output: "?" }


# Vowels

alignable { input: "a-" output: "a-" }
alignable { input: "a-" output: "a," }

alignable { input: "i" output: "i" }
alignable { input: "i" output: "a-" }

alignable { input: "i;" output: "i;" }

alignable { input: "i," output: "i," }
alignable { input: "i," output: "i'" }
alignable { input: "i," output: "ei' ?" }
alignable { input: "i," output: "a-" }

alignable { input: "i'"   output: "i'" }
alignable { input: "i'"   output: "iT'" }
alignable { input: "i' ?" output: "a-" }

alignable { input: "u" output: "u" }
alignable { input: "u" output: "a-" }

alignable { input: "u;" output: "u;" }

alignable { input: "u," output: "u," }
alignable { input: "u," output: "u'" }
alignable { input: "u," output: "a-" }

alignable { input: "u'" output: "u'" }

alignable { input: "e" output: "e" }
alignable { input: "e" output: "a-" }

alignable { input: "e;" output: "e;" }

alignable { input: "e," output: "e," }

alignable { input: "o" output: "o" }

alignable { input: "o;" output: "o;" }

alignable { input: "o," output: "o," }

alignable { input: "eL" output: "eL" }
alignable { input: "eL" output: "e" }    # written with <nnya>
alignable { input: "eL" output: "i" }    # written with <nnya>
alignable { input: "eL" output: "a-" }   # written with <ya>

alignable { input: "eL;" output: "eL;" }
alignable { input: "eL;" output: "e;" }  # written with <nnya>
alignable { input: "eL;" output: "i;" }  # written with <nnya>
alignable { input: "eL;" output: "a-" }

alignable { input: "eL," output: "eL," }
alignable { input: "eL," output: "e," }  # written with <nnya>
alignable { input: "eL," output: "i," }  # written with <nnya>

alignable { input: "au"  output: "au" }

alignable { input: "au;"      output: "au;" }
alignable { input: "au; . k1" output: "au' ? . k1" }  # unwritten stack

alignable { input: "au," output: "au," }

alignable { input: "a" output: "a" }
alignable { input: "a" output: "a-" }

alignable { input: "a;" output: "a;" }
alignable { input: "a;" output: "a-" }

alignable { input: "a," output: "a," }
alignable { input: "a," output: "a'" }
alignable { input: "a," output: "a-" }

alignable { input: "a'"   output: "a'" }
alignable { input: "a'"   output: "aT'" }
alignable { input: "a' ?" output: "a-" }

alignable { input: "iN" output: "iN" }
alignable { input: "iN" output: "iN;" }  # preceding tone not marked in stack
alignable { input: "iN" output: "a-" }

alignable { input: "iN;" output: "iN;" }

alignable { input: "iN," output: "iN," }

alignable { input: "uN" output: "uN" }
alignable { input: "uN" output: "a-" }

alignable { input: "uN;" output: "uN;" }

alignable { input: "uN," output: "uN," }

alignable { input: "eiN" output: "eiN" }

alignable { input: "eiN;" output: "eiN;" }

alignable { input: "eiN," output: "eiN," }

alignable { input: "oaN" output: "oaN" }

alignable { input: "oaN;" output: "oaN;" }

alignable { input: "oaN," output: "oaN," }

alignable { input: "aiN" output: "aiN" }

alignable { input: "aiN;" output: "aiN;" }

alignable { input: "aiN," output: "aiN," }

alignable { input: "auN" output: "auN" }

alignable { input: "auN;" output: "auN;" }

alignable { input: "auN," output: "auN," }

alignable { input: "aN" output: "aN" }
alignable { input: "aN" output: "aN;" }  # preceding tone not marked in stack
alignable { input: "aN" output: "a-" }

alignable { input: "aN;" output: "aN;" }
alignable { input: "aN;" output: "a-" }

alignable { input: "aN," output: "aN," }
alignable { input: "aN," output: "a-" }

alignable { input: "iT'" output: "iT'" }

alignable { input: "uT'" output: "uT'" }

alignable { input: "ei'" output: "ei'" }

alignable { input: "oa'"   output: "oa'" }
alignable { input: "oa' ?" output: "a-" }

alignable { input: "e'"   output: "e'" }
alignable { input: "e' ?" output: "a-" }

alignable { input: "ai'" output: "ai'" }
alignable { input: "ai'" output: "e'" }

alignable { input: "au'" output: "au'" }

alignable { input: "aT'" output: "aT'" }
alignable { input: "aT'" output: "a'" }

alignable { input: "." output: "." }

alignable { input: "/" output: "/" }
