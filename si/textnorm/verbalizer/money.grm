# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Copyright 2016 and onwards, Google, Inc.

# Currencies for Sinhala.
# money { currency: "usd" amount { integer_part: "1" fractional_part: "20"}
# style: 1 } is the input formats.

import 'universal_rules.grm' as universal_rules;
import 'universal_func.grm' as universal_func;
import 'cardinal.grm' as c ;
import 'decimal.grm' as d ;

remove_quote = "\"" : "";
remove_opening_brace = "{" : "";
remove_closing_brace = "}" : "";

remove_number = universal_rules.factorized_number : "";
discard_number = remove_quote remove_number remove_quote;
quantities =
    ("100000" : "ලක්ෂ")
  | ("1000000" : "මිලියන")
  | ("10000000" : "කෝටි")
  | ("1000000000" : "බිලියන");

minor_unit = StringFile[
    'money_minor.tsv'];
major_unit = StringFile[
    'money_major.tsv'];

minor_markup = universal_rules.money_currency remove_quote minor_unit remove_quote;
major_markup = universal_rules.money_currency remove_quote major_unit remove_quote;

# Reads just the major part of the money amount, discards the fraction.
major_part =
  universal_rules.money_amount remove_opening_brace universal_rules.decimal_integer
  remove_quote c.CARDINAL remove_quote
  (universal_rules.decimal_fraction discard_number)?
  universal_rules.del_space_star remove_closing_brace;
# Reads just the minor part of the money amount, discards the integer.
minor_part =
  universal_rules.money_amount remove_opening_brace
  (universal_rules.decimal_integer discard_number)?
  universal_rules.decimal_fraction remove_quote ("0" : "")? c.CARDINAL
  remove_quote universal_rules.del_space_star remove_closing_brace;

# Generates verbalization of either major or minor part with
# specialization for a singular form for 1.
func MoneyPart[part, single_markup] {
  return (single_markup universal_rules.ins_space part);
}

normal =
  major_markup
  universal_rules.ins_space
  universal_rules.money_amount remove_opening_brace
  universal_rules.decimal_integer remove_quote c.CARDINAL remove_quote
  (("" : "යි ") universal_rules.decimal_fraction remove_quote c.CARDINAL remove_quote)?
  remove_closing_brace
  (universal_rules.style1 | universal_rules.style2 | universal_rules.style3 | universal_rules.del_space_star)
;

# Read both major and minor units explicitly.
# e.g., Rs. 10.12 -> රුපියල් දහයයි ශත දොළහ.
# (English version: $ 10.12 -> ten dollars and twelve cents)
major_and_minor =
  MoneyPart[major_part, major_markup]
  (universal_rules.style1 | universal_rules.style2 | universal_rules.style3)
  remove_closing_brace
  universal_rules.money
  remove_opening_brace
  ("" : "යි")
  universal_rules.ins_space
  MoneyPart[minor_part, minor_markup]
  (universal_rules.style1 | universal_rules.style2 | universal_rules.style3);

del_anything = universal_rules.kBytes* : "";

# Anything with a quantity.
# Quantity is verbalized before the amount and after the currency.
with_quantity =
  major_markup
  universal_rules.ins_space
  universal_rules.money_amount
  remove_opening_brace
  universal_rules.decimal_integer
  discard_number
  (universal_rules.decimal_fraction
  discard_number)?
  universal_rules.del_space_star
  remove_closing_brace
  universal_rules.money_quantity
  quantities
  (universal_rules.style1 | universal_rules.style2 | universal_rules.style3 | universal_rules.del_space_star)
  remove_closing_brace
  universal_rules.money
  remove_opening_brace
  universal_rules.money_currency
  del_anything
  universal_rules.money_amount
  remove_opening_brace
  universal_rules.ins_space
  d.DECIMAL
  universal_rules.del_space_star
  remove_closing_brace
  universal_rules.money_quantity
  remove_number
  (universal_rules.style1 | universal_rules.style2 | universal_rules.style3 | universal_rules.del_space_star)
;

# Major part only.
# Includes minor parts of value zero - you don't say
# "twelve dollars and zero cents" even if the .00 is written.
amount_major_only =
  universal_rules.money_amount remove_opening_brace
  universal_rules.decimal_integer remove_quote c.CARDINAL remove_quote
  (universal_rules.decimal_fraction remove_quote ("0" : "")+ remove_quote)?
  universal_rules.del_space_star remove_closing_brace
;

major_only =
  (major_markup universal_rules.ins_space amount_major_only)
  (universal_rules.style1 | universal_rules.del_space_star)
;

amount_minor_only =
  universal_rules.money_amount remove_opening_brace
  (universal_rules.decimal_integer remove_quote ("0" : "")+ remove_quote)?
  universal_rules.decimal_fraction remove_quote
  ("0" : "")? c.CARDINAL
  remove_quote universal_rules.del_space_star remove_closing_brace
;

minor_only =
  (minor_markup universal_rules.ins_space amount_minor_only)
  (universal_rules.style1 | universal_rules.del_space_star)
;

export MONEY_MARKUP = Optimize[
  universal_rules.money
  remove_opening_brace
  ((minor_only <1>)
  | (major_only <2>)
  | (major_and_minor <3>)
  | (normal <4>)
  | (with_quantity <5>))
  remove_closing_brace
];

# Reduplication rule for money; reduplicate for any case that has non-zero
# integer and fractional parts.
redup =
  universal_rules.money
  universal_rules.opening_brace
  universal_rules.money_currency
  universal_rules.quote
  universal_rules.kLower+
  universal_rules.quote
  universal_rules.money_amount
  universal_rules.opening_brace
  universal_rules.decimal_integer
  universal_rules.quote
  universal_rules.non_zero_number
  (universal_rules.quote
  universal_rules.decimal_fraction
  universal_rules.quote
  universal_rules.non_zero_number
  universal_rules.quote)?
  universal_rules.closing_brace
  (universal_rules.money_quantity
  universal_rules.non_zero_number)?
  universal_rules.any_style
  universal_rules.closing_brace
;
export REDUP = Optimize[Project[redup, 'input']];
